import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import Layout from "@/components/Layout";
import { Box, Grid, Typography } from "@mui/material";
import { useEffect, useState } from "react";
import dynamic from "next/dynamic";
import { useRouter } from "next/router";
import ghostLogo from "@/assets/images/ghost-logo.svg";
import BlogCardsHome from "@/components/BlogCardsHome";
import NW, { BaseUrl, EndPoint } from "@/helper/NWRequest";
import { BLOG_OBJECT } from "@/Interface/interface";
import Utils from "@/helper/Utils";

export default function Home() {
  const router = useRouter();
  const [isDomLoaded, setIsDomLoaded] = useState<boolean>(false);
  const [blogsArr, setBlogArr] = useState<BLOG_OBJECT[]>();

  useEffect(() => {
    if(!Utils.getCookie('userToken')){
      router.push('/login')
    }
    if (typeof globalThis.window !== "undefined") setIsDomLoaded(true);
    getAllPosts();
  }, [globalThis, globalThis.window]);

  const getAllPosts = async () => {
    const allBlogs = await NW.Get(BaseUrl, EndPoint.GET_All_BLOGS);
    if (allBlogs) {
      setBlogArr(allBlogs);
    }
  };

  return (
    <>
      {isDomLoaded ? (
        <>
          <Head>
            <title>Ghost-CMS</title>
            <meta name="description" content="Generated by create next app" />
            <meta
              name="viewport"
              content="width=device-width, initial-scale=1"
            />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <Layout>
            <Grid sx={{ minHeight: "100vh", background: "#090A0A" }}>
              <Box sx={{ padding: "24px", display: "flex" }}>
                {[
                  {
                    title: "Home",
                    redirectFunction: () => router.push("/"),
                  },
                  {
                    title: "Tag",
                    redirectFunction: () => router.push("/tags"),
                  },
                ].map((item) => {
                  return (
                    <Typography
                      sx={{
                        color: "white",
                        typography: "font_16_500",
                        margin: "0 8px",
                        cursor: "pointer",
                      }}
                      key={item.title}
                    >
                      {item.title}
                    </Typography>
                  );
                })}
              </Box>
              <Box
                sx={{
                  display: "grid",
                  placeContent: "center",
                  minHeight: "250px",
                }}
              >
                <Image
                  src={ghostLogo.src}
                  alt="ghostlogo"
                  height={48}
                  width={240}
                />
                <Typography
                  sx={{
                    color: "white",
                    typography: "font_20_600",
                    textAlign: "center",
                  }}
                >
                  Thoughts, stories and ideas.
                </Typography>
              </Box>
              {blogsArr && blogsArr.length ? (
                <Box sx={{ margin: "48px 0 0 0" }}>
                  <BlogCardsHome blogs={blogsArr} />
                </Box>
              ) : null}
            </Grid>
          </Layout>
        </>
      ) : null}
    </>
  );
}
